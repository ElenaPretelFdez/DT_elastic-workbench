services:

  qr-detector:
    container_name: elastic-workbench-qr-detector-1
    build:
      context: .
      dockerfile: iot_services/QrDetector/QrDetector.Dockerfile
    networks:
      docker_network:
        ipv4_address: 172.20.0.5
    environment:
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=0 # Always flushes out
      - CONTAINER_REF=elastic-workbench-qr-detector-1
      - REDIS_INSTANCE=172.20.0.4
      - DEFAULT_CLIENTS=C_1:100
      - TZ=Europe/Vienna # TODO: If I dont work ok Windows anymore, mount timezone volume
    volumes:
      - ./share:/src/share # Linux
      #      - /c/users/boris/development/elastic-workbench/share:/src/share # Windows
      - /var/run/docker.sock:/var/run/docker.sock # Needed on Windows
    ports:
      - "8080:8080" # Only needed on Windows
    depends_on:
      - redis
      - grafana
      - prometheus

  cv-analyzer:
    container_name: elastic-workbench-cv-analyzer-1
    build:
      context: .
      dockerfile: iot_services/CvAnalyzer/CvAnalyzer.Dockerfile
    networks:
      docker_network:
        ipv4_address: 172.20.0.10
    environment:
      - FLASK_ENV=development
      - PYTHONUNBUFFERED=0 # Always flushes out
      - CONTAINER_REF=elastic-workbench-cv-analyzer-1
      - REDIS_INSTANCE=172.20.0.4
      - DEFAULT_CLIENTS=C_3:100
      - TZ=Europe/Vienna
    volumes:
      - ./share:/src/share # Linux
#      - /c/users/boris/development/elastic-workbench/share:/src/share # Windows
      - /var/run/docker.sock:/var/run/docker.sock # Needed on Windows
    ports:
      - "8081:8080" # Only needed on Windows
    depends_on:
      - redis
      - grafana
      - prometheus


  #  qr-detector-2:
  #    image: elastic-workbench-qr-detector:latest
  #    container_name: elastic-workbench-qr-detector-2
  #    networks:
  #      docker_network:
  #        ipv4_address: 172.20.0.6
  #    environment:
  #      - FLASK_ENV=development
  #      - PYTHONUNBUFFERED=0 # Always flushes out
  #      - DOCKER_SOCKET=unix:///var/run/docker.sock # Always in Container
  #      - CONTAINER_REF=elastic-workbench-qr-detector-2
  #      - REDIS_INSTANCE=172.20.0.4
  #      - DEFAULT_CLIENTS=C_3:60
  #      - TZ=Europe/Vienna # TODO: If I dont work ok Windows anymore, mount timezone volume
  #    volumes:
  #      - /home/boris/development/elastic-workbench/share:/src/share # Linux
  ##      - /c/users/boris/development/elastic-workbench/share:/src/share # Windows
  #      - /var/run/docker.sock:/var/run/docker.sock # Need to map the host socket into the container so that the client can access it

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    networks:
      docker_network:
        ipv4_address: 172.20.0.2
    ports:
      - "9090:9090" # Prometheus UI
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml # Linux
#      - /c/users/boris/development/elastic-workbench/prometheus.yml:/etc/prometheus/prometheus.yml # Windows
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-admin-api

  grafana:
    image: grafana/grafana
    container_name: grafana
    networks:
      docker_network:
        ipv4_address: 172.20.0.3
    ports:
      - "3000:3000" # Grafana UI
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=adminadmin
    depends_on:
      - prometheus

  redis:
    image: redis:latest
    container_name: redis
    networks:
      docker_network:
        ipv4_address: 172.20.0.4
    ports:
      - "6379:6379"
    restart: unless-stopped

# I think this network does not show effects
networks:
  docker_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/24
